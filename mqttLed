// Incluye librerías necesarias para el ESP8266 y MQTT
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Definición de constantes para la conexión WiFi y el servidor MQTT
const char* ssid = "********";        // SSID de la red WiFi
const char* password = "*******";    // Contraseña de la red WiFi
const char* mqtt_server = "*********"; // Dirección del servidor MQTT

WiFiClient espClient;             // Cliente WiFi para conectar a la red
PubSubClient client(espClient);   // Cliente MQTT utilizando el cliente WiFi

unsigned long lastMsg = 0;        // Variable para almacenar el tiempo del último mensaje enviado
#define MSG_BUFFER_SIZE (50)      // Tamaño del buffer para los mensajes MQTT
char msg[MSG_BUFFER_SIZE];        // Buffer para los mensajes MQTT
int value = 0;                    // Contador para los mensajes enviados
int led = 0;                      // Variable para almacenar el estado de un LED
int led1 = 1;                     // Variable para almacenar el estado de otro LED

// Función para configurar la conexión WiFi
void setup_wifi() {
    delay(10);
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);

    // Configura el modo WiFi del ESP8266 y comienza la conexión
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);

    // Espera hasta que el ESP esté conectado a la red WiFi
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    randomSeed(micros());
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP()); // Imprime la dirección IP asignada
}

// Función de callback que se llama cuando llega un mensaje MQTT
void callback(char* topic, byte* payload, unsigned int length) {
    Serial.print("Message arrived [");
    Serial.print(topic);
    Serial.print("] ");
    for (int i = 0; i < length; i++) {
        Serial.print((char)payload[i]);
    }
    Serial.println();

    // Enciende o apaga el LED según el primer carácter del mensaje recibido
    if ((char)payload[0] == '1') {
        digitalWrite(BUILTIN_LED, LOW); // Enciende el LED (activo en bajo)
    } else {
        digitalWrite(BUILTIN_LED, HIGH); // Apaga el LED
    }
}

// Función para reconectar al servidor MQTT en caso de desconexión
void reconnect() {
    // Loop hasta que se logre conectar
    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        String clientId = "ESP8266Client-";
        clientId += String(random(0xffff), HEX); // Genera un ID de cliente aleatorio

        // Intenta conectar al servidor MQTT
        if (client.connect(clientId.c_str())) {
            Serial.println("connected");

            // Publica un mensaje de anuncio una vez conectado
            client.publish("outTecsup", msg);
            // Se suscribe a un topic
            client.subscribe("inTopic");
        } else {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" try again in 5 seconds");
            delay(5000); // Espera 5 segundos antes de reintentar
        }
    }
}

// Función de configuración inicial
void setup() {
    pinMode(BUILTIN_LED, OUTPUT); // Configura el pin del LED como salida
    Serial.begin(115200);         // Inicia la comunicación serial
    setup_wifi();                 // Llama a la función para configurar la conexión WiFi
    client.setServer(mqtt_server, 1883); // Configura el servidor MQTT
    client.setCallback(callback); // Configura la función de callback para los mensajes MQTT
}

// Función principal que se ejecuta en loop
void loop() {
    if (!client.connected()) { // Revisa si el cliente está conectado
        reconnect();           // Si no está conectado, intenta reconectar
    }
    client.loop();             // Mantiene la conexión MQTT

    unsigned long now = millis();
    if (now - lastMsg > 2000) { // Envía un mensaje cada 2 segundos
        lastMsg = now;
        ++value;
        led = digitalRead(BUILTIN_LED); // Lee el estado del LED
        led1 = digitalRead(D3);         // Lee el estado de otro LED en el pin D3
        snprintf(msg, MSG_BUFFER_SIZE, "LED1:%d, LED2:%d", led, led1); // Formatea el mensaje
        Serial.print("Publish message: ");
        Serial.println(msg);
        client.publish("outTecsup", msg); // Publica el mensaje en el topic "outTecsup"
    }
}
