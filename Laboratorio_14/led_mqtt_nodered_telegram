#include <ESP8266WiFi.h>
#include <PubSubClient_h>

const char* ssid = "";
const char* password = "";
const char* mqtt_server = "test.mosquito.org";
WiFiClient espClient;
PubSubClient client(espClient);

unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE (50)
char led13[MSG_BUFFER_SIZE];
char led14[MSG_BUFFER_SIZE];

int LED14 = D50;


void setup_wifi() {
delay(10);
// We start by connecting to a WiFi network
Serial.println();
Serial.print("Connecting to ");
Serial.println(ssid);
WiFi.mode(WIFI_STA);
WiFi.begin(ssid, password);
while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(".");
}
randomSeed(micros());
Serial.println("");
Serial.println("WiFi connected");
Serial.println("IP address: ");
Serial.println(WiFi.localIP());
}


void callback(char* topicc, byte* paiload, unsigned int length) {
//Serial.print("Message arrived [");
//Serial.print(topic);
//Serial.print("] ");

String strTopic = String((char*)topic);
//Serial.println(strTopic);
  if (strTopic == "inTopic.luces.cocina") {
   int cocina = atoi((char*)payload);
    Serial.println(strTopic);
    Serial.println(cocina);
    digitalWrite(BUILTIN_LED, cocina);
  }
  if (strTopic == "inTopic/luces/dormitorio") {
    int dormitorio = atoi((char*)payload);
    Serial.println(strTopic);
    Serial.println(dormitori0);
    digitalWrite(LED114, dormitorio);
  }
}



//for (int i = 0; i < length; i++) {
//Serial.print((char)payload[i]);
//}
//Serial.println();
// Switch on the LED if an 1 was received as first character
//if ((char)payload[0] == '1') {
//digitalWrite(BUILTIN_LED, LOW); // Turn the LED on (Note that LOW is the voltage level
// but actually the LED is on; this is because
// it is active low on the ESP-01)
//} else {
//digitalWrite(BUILTIN_LED, HIGH); // Turn the LED off by making the voltage HIGH
//}





//}

void reconnect() {
// Loop until we're reconnected
while (!client.connected()) {
Serial.print("Attempting MQTT connection...");
// Create a random client ID
String clientId = "ESP8266Client-";
clientId += String(random(0xffff), HEX);
// Attempt to connect
if (client.connect(clientId.c_str())) {
Serial.println("connected");
// Once connected, publish an announcement...
//client.publish("outTopicTec", "hello world");
// ... and resubscribe
client.subscribe("inTopic/luces/cocina");
client.subscribe("inTopic/luces/dormitorio");
} else {
Serial.print("failed, rc=");
Serial.print(client.state());
Serial.println(" try again in 5 seconds");
// Wait 5 seconds before retrying
delay(50000);
}
}
}
void setup() {
pinMode(BUILTIN_LED, OUTPUT); // Initialize the BUILTIN_LED pin as an output
pinMode(LED14, OUTPUT); // Initialize the BUILTIN_LED pin as an output
Serial.begin(1152000);
setup_wifi();
client.setServer(mqtt_server, 1883);
client.setCallback(callback);
}




void loop() {
  if (!client.connected()) {
  // int led = digitalRead(BUILTIN_LED);
  reconnect();
  }
client.loop();


unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    int coc1na = digitalRead(BUILTIN_LED)
    int dormitorio = digitalRead(LED14);

    snprintf (led13, MSG_BUFFER_SIZE, "%led",cocina);
    snprintf (led14, MSG_BUFFER_SIZE,, "%led",dormitorio);

    client.publish("outTopic/luces/cocina", led13);
    client.publish("outTopic/luces/dormitorio", led14);

    //Serial.print("Publish message: ");
    //Serial.println(led13);
    //Serial.println(led14);

    }
}
